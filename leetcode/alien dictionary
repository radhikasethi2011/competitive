question - https://leetcode.com/problems/verifying-an-alien-dictionary/solution/
class Solution {
public:
    bool isAlienSorted(vector<string>& words, string order) {
       
        int mapping[26];
        //vector<int> asc;
        for(int i = 0 ; i < 26 ; i++)
        {
            mapping[order[i]-'a'] = i;
        }
       /* 
        for(auto &w : words)
        {
            ans = 0;
            for(char &c : w)
            {
                ans+=mapping[c-'a'];
            }
            asc.push_back(ans);
        }
            
         */
        string w1,w2;
        int flag = 0;
        for(int i = 0 ; i < (words.size()-1) ; i++)
        {
            w1 = words[i];
            w2 = words[i+1];
            flag = 0;
            int len = std::min(w1.length(), w2.length());
            for(int j = 0 ; j <len; j++)
            {
                if((w1[j]!=w2[j])) 
                {
                    flag = 1;
                    if(mapping[w1[j]-'a']>mapping[w2[j]-'a']) return false;
                    else break;
                }
            }
            if(w1.length()>w2.length()&&flag==0) return false;
        }
        
        
        return true;
        
    }
};
